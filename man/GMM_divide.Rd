% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FeA.R
\name{GMM_divide}
\alias{GMM_divide}
\title{GMM-based subpopulation separation}
\usage{
GMM_divide(vec, G = 2, seed = NULL)
}
\arguments{
\item{vec}{One-dimensional numeric vector or data frame.}

\item{G}{Integer number of Gaussian components to be used in the mixture.}

\item{seed}{Integer to set the (inner) seed and ensure reproducibility.}
}
\value{
A named list with the following elements:
\describe{
\item{\code{fit}}{An object of class 'Mclust' providing the GMM estimation.}
\item{\code{x}}{A 1000-point numeric vector providing the x-values used
to evaluate the GMM components. Useful for plotting.}
\item{\code{components}}{A 1000-by-\code{G} data frame featuring the single
probability-weighted Gaussian components evaluated in
\code{x}. Useful for plotting.}
\item{\code{boundary}}{A named numeric vector containing the \eqn{T_{G-1}}
decision boundaries computed as intersection between the
elements of all the possible \emph{2}-combinations of Gaussian
components.}
}
}
\description{
This is a wrapper for the \code{Mclust} function (from the
\pkg{mclust} package) which uses Gaussian Mixture Models (GMMs)
to fit data distribution. GMMs represent a general approach to
data clustering and subpopulations detection. If applied to gene
expression data (from either microarray or RNA-Seq experiments),
GMMs can be used to separate expressed from unexpressed genes.
To this aim, the \code{GMM_divide} function returns the values of the
individual probability-weighted Gaussian components of the
mixture and the boundary points suitable for subpopulation
separation. Expected input data are \strong{unbinned} expression
values (not their probability density function), usually
log2-transformed. \strong{NOTE:} when analyzing RNA-Seq \emph{\strong{counts}},
it is always better to remove 0s first (e.g.,
\code{GMM_divide(counts[counts != 0], G = 3)}).
}
\details{
The decision boundaries are computed from the intersection of two
GMM components at a time, meaning that two probability-weighted
Gaussian functions with unequal variances need to be equated for
each possible combination \eqn{\left(i,j\right)} of two components
of the mixture, namely
\deqn{
           \begin{gathered}
             \frac{P_i}{\sqrt{2\pi}\sigma_i}
               e^{-\left(\mu_i-x\right)^2/2\sigma_{i}^{2}}=
               \frac{P_j}{\sqrt{2\pi}\sigma_j}
               e^{-\left(\mu_j-x\right)^2/2\sigma_{j}^{2}}\\[20pt]
             e^{\left(\mu_j-x\right)^2/2\sigma_{j}^{2}-
               \left(\mu_i-x\right)^2/2\sigma_{i}^{2}}=
               \frac{P_j\sigma_i}{P_i\sigma_j}\\[20pt]
             \frac{\sigma_{i}^{2}\left(\mu_j-x\right)^2-
               \sigma_{j}^{2}\left(\mu_i-x\right)^2}
               {\sigma_{j}^{2}\sigma_{i}^{2}}=
               2\ln{\frac{P_j\sigma_i}{P_i\sigma_j}}\\[20pt]
             x^2\left(\sigma_{i}^{2}-\sigma_{j}^{2}\right)-
               2x\left(\sigma_{i}^{2}\mu_j-\sigma_{j}^{2}\mu_i\right)+
               \sigma_{i}^{2}\mu_{j}^{2}-
               \sigma_{j}^{2}\mu_{i}^{2}=
               2\sigma_{i}^{2}\sigma_{j}^{2}
               \ln{\frac{P_j\sigma_i}{P_i\sigma_j}}\\[20pt]
             x_{1,2}=\frac{-B/2\ \pm\ \sqrt{\left(B/2\right)^2-AC}}
               {A},\ \ \ \text{with}\\[20pt]
             \left\{
               \begin{aligned}
                 A    & = \sigma_{i}^{2}-\sigma_{j}^{2}\\
                 -B/2 & = \sigma_{i}^{2}\mu_j-\sigma_{j}^{2}\mu_i\\
                 C    & = \sigma_{i}^{2}\mu_{j}^{2}-
                          \sigma_{j}^{2}\mu_{i}^{2}-
                          2\sigma_{i}^{2}\sigma_{j}^{2}
                          \ln{\frac{P_j\sigma_i}{P_i\sigma_j}}
               \end{aligned}
             \right.
           \end{gathered}
         }
The last equations show that it is possible to have one single root
(i.e., just one intersection point) only when
\eqn{\sigma_{i}=\sigma_{j}} (but \eqn{\mu_i\neq\mu_j}), in which
case the boundary is found at
\deqn{
           \begin{gathered}
             x=\frac{\mu_i+\mu_j}{2}+
               \frac{\sigma^2}{\mu_i-\mu_j}\ln\frac{P_j}{P_i}
           \end{gathered}
         }
On the contrary, if \eqn{\sigma_{i}\neq\sigma_{j}} solutions are
always two (although, in principle, they can be real-valued, complex
conjugates, or a double root).
Provided that the solutions are real-valued, \code{GMM_divide} function
returns \emph{the highest intersection point} as single decision
boundary, namely
\deqn{
           \begin{aligned}
             \argmax_{x\in\left\{x_{1},x_{2}\right\}}
               \frac{P_k}{\sqrt{2\pi}\sigma_k}
               e^{-\left(\mu_k-x\right)^2/2\sigma_{k}^{2}}\ \ \ \ \
               \text{with}\ \ k=i\ \vee\ k=j
           \end{aligned}
         }
In general, the number of \emph{combinations} of two
elements from a given set of \code{G} elements (i.e., the length of
\code{boundary} output vector) is
\deqn{
           \begin{aligned}
             \binom{G}{2}=\frac{G!}{2!(G-2)!}=\frac{G\left(G-1\right)}{2}
               =\sum_{k=1}^{G-1}k=T_{G-1}
           \end{aligned}
         }
where \eqn{T_{n}} denotes the n-th
\href{https://en.wikipedia.org/wiki/Triangular_number}{triangular
number}.
}
\examples{
# Single sample and group analysis

log_expression <- as.data.frame(DEGs_expr$`Anti-TNFa_4`)
log_expression[,2] <- rowMeans(DEGs_expr[,grep("MTX", colnames(DEGs_expr))])
colnames(log_expression) <- c("Single_Sample", "Whole_Group")

for (condition in colnames(log_expression)) {
  plot(density(log_expression[,condition]),
       main = paste0(condition, " - Kernel Density Plot"))
  gmm <- GMM_divide(log_expression[,condition], G = 3)
  for (i in 1:gmm$fit$G) {
    lines(gmm$x, gmm$components[,i], col = "blue")
  }
  lines(gmm$x, rowSums(gmm$components), col = "red", lty = 2)
  for (i in 1:gmm$fit$G) {
    lines(c(gmm$boundary[i], gmm$boundary[i]), c(0, 1), lty = 2)
  }
}
}
\references{
\url{https://cran.r-project.org/web/packages/mclust/vignettes/mclust.html}
}
\author{
FeA.R
}
